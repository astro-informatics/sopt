name: CMake

on:
  push:
    branches: [ development ]
  pull_request:
    # CI runs when new commits are pushed or when draft PR is marked ready for review
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OMP_NUM_THREADS: 2

jobs:
  build:
    # Skip CI if PR is a draft
    if: github.event.pull_request.draft == false
    name: ${{matrix.os}}-${{matrix.cxx}}-mpi:${{matrix.mpi}}-openmp:${{matrix.omp}}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    strategy:
      fail-fast: false
      matrix:
          os:
            - ubuntu-20.04
            - macos-14
          cc:
            - gcc-10
            - clang
          cxx:
            - g++-10
            - clang++
          mpi:
            - "ON"
            - "OFF"
          omp:
            - "ON"
            - "OFF"
          exclude:
            - cc: gcc-10
              cxx: clang++
            - cc: clang
              cxx: g++-10
            - os: ubuntu-20.04
              cc: clang
              cxx: clang++
            - os: macos-14
              mpi: "ON"
            # This doesn't seem to work with ONNXrt yet:
            - os: macos-14
              cxx: g++-10

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Dependencies on Ubunutu
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        sudo apt update
        sudo apt install openmpi-bin libopenmpi-dev libyaml-cpp-dev ccache libeigen3-dev libtiff-dev

    - name: Checkout Catch2
      uses: actions/checkout@v4
      with:
        repository: catchorg/Catch2.git
        path: Catch2
        ref: v3.4.0

    - name: Build Catch2
      run: |
         mkdir Catch2/build
         cd Catch2/build
         cmake .. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/local
         make -j$(nproc --ignore 1) install

    - name: Install Dependencies on MacOS
      if: ${{ contains(matrix.os, 'macos') }}
      run: |
        brew install libtiff libomp open-mpi eigen libyaml ccache catch2
        echo "CMAKE_PREFIX_PATH=/opt/homebrew/opt/libomp" >> $GITHUB_ENV
        echo "/opt/homebrew/opt/ccache/libexec" >> $GITHUB_PATH
        #echo "/opt/homebrew/opt/libomp" >> $GITHUB_PATH

    #- name: Install gcc on MacOS
    #  if: ${{ contains(matrix.os, 'macos') && contains(matrix.cxx, 'g++10') }}
    #  run: |
    #    brew install gcc@10

    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: echo "{date_and_time}={$(date +'%Y-%m-%d-%H;%M;%S')}" >> $GITHUB_OUTPUT
    - name: Set ccache cache directory
      shell: bash
      run: echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
    - name: Cache ccache files
      uses: actions/cache@v3
      with:
        path: ${{runner.workspace}}/.ccache
        key: ${{matrix.os}}-${{matrix.cxx}}-${{matrix.mpi}}-${{matrix.omp}}-${{ steps.ccache_cache_timestamp.outputs.date_and_time }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.mpi }}-${{ matrix.omp }}
          ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.mpi }}
          ${{ matrix.os }}-${{ matrix.cxx }}
          ${{ matrix.os }}

    - name: Build
      # Build your program with the given configuration.
      # The Github Actions machines are dual-core so we can build faster using 2 parallel processes
      run: |
        export CMAKE_PREFIX_PATH=${{github.workspace}}/local:$CMAKE_PREFIX_PATH
        mkdir ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake .. --fresh -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/local -Ddompi=${{matrix.mpi}} -Dopenmp=${{matrix.omp}}
        make -j$(nproc --ignore 1) install


    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
