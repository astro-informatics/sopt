name: CMake

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
    if: github.event.pull_request.draft == false
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  OMP_NUM_THREADS: 2
  CONAN_PRINT_RUN_COMMANDS: 1
  CONAN_CPU_COUNT: 2

jobs:
  build:
    name: macos-clang-debug
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-11
    env:
      CC: clang
      CXX: clang++

    steps:
    - uses: actions/checkout@v2

   # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - name: Install Dependencies on MacOS
      if: ${{ contains(matrix.os, 'macos') }}
      run: brew install libtiff open-mpi libyaml ccache conan

    - name: Conan install on apple-clang
      if: ${{ contains(matrix.cxx, 'clang++') }}
      run: conan install ${{github.workspace}} -if ${{github.workspace}}/build --build missing -o mpi=on -o openmp=on

    - name: Build
      # Build your program with the given configuration.
      # The Github Actions machines are dual-core so we can build faster using 2 parallel processes
      run: conan build ${{github.workspace}} -bf ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
